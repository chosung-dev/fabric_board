{
  "_args": [
    [
      "package-hash@3.0.0",
      "/usr/src/npm/nyc"
    ]
  ],
  "_from": "package-hash@3.0.0",
  "_id": "package-hash@3.0.0",
  "_inBundle": false,
  "_integrity": "sha512-lOtmukMDVvtkL84rJHI7dpTYq+0rli8N2wlnqUcBuDWCfVhRUfOmnR9SsoHFMLpACvEV60dX7rd0rFaYDZI+FA==",
  "_location": "/nyc/package-hash",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "package-hash",
    "fetchSpec": "3.0.0",
    "name": "package-hash",
    "raw": "package-hash@3.0.0",
    "rawSpec": "3.0.0",
    "registry": true,
    "saveSpec": null,
    "type": "version"
  },
  "_requiredBy": [
    "/nyc/caching-transform"
  ],
  "_resolved": "https://registry.npmjs.org/package-hash/-/package-hash-3.0.0.tgz",
  "_shrinkwrap": null,
  "_spec": "3.0.0",
  "_where": "/usr/src/npm/nyc",
  "author": {
    "name": "Mark Wubben",
    "url": "https://novemberborn.net/"
  },
  "bugs": {
    "url": "https://github.com/novemberborn/package-hash/issues"
  },
  "dependencies": {
    "graceful-fs": "^4.1.15",
    "hasha": "^3.0.0",
    "lodash.flattendeep": "^4.4.0",
    "release-zalgo": "^1.0.0"
  },
  "description": "Generates a hash for an installed npm package, useful for salting caches",
  "devDependencies": {
    "@novemberborn/as-i-preach": "^11.0.0",
    "ava": "^1.1.0",
    "codecov": "^3.1.0",
    "nyc": "^13.1.0",
    "rimraf": "^2.6.3",
    "tar": "^4.4.8"
  },
  "engines": {
    "node": ">=6"
  },
  "files": [
    "index.js"
  ],
  "homepage": "https://github.com/novemberborn/package-hash#readme",
  "license": "ISC",
  "main": "index.js",
  "name": "package-hash",
  "nyc": {
    "cache": true,
    "exclude": [
      "scripts",
      "test"
    ],
    "reporter": [
      "html",
      "lcov",
      "text"
    ]
  },
  "optionalDependencies": {},
  "readme": "# package-hash\n\nGenerates a hash for an installed npm package, useful for salting caches.\n[AVA](https://github.com/sindresorhus/ava) for example caches precompiled test\nfiles. It generates a salt for its cache based on the various packages that are\nused when compiling the test files.\n\n`package-hash` can generate an appropriate hash based on the package location\n(on disk) and the `package.json` file. This hash is salted with a hash\nfor the `package-hash` itself.\n\n`package-hash` can detect when the package-to-be-hashed is a Git repository. In\nthe AVA example this is useful when you're debugging one of the packages used to\ncompile the test files. You can clone it locally and use `npm link` so AVA can\nfind the clone. The hash will include the HEAD (`.git/HEAD`) and its\ncorresponding ref (e.g. `.git/refs/heads/master`), any packed refs\n(`.git/packed-refs`), as well as the diff (`git diff`) for any non-committed\nchanges. This makes it really easy to test your changes without having to\nexplicitly clear the cache in the parent project.\n\n## Installation\n\n```console\n$ npm install --save package-hash\n```\n\n## Usage\n\n```js\nconst packageHash = require('package-hash')\n\n// Asynchronously:\nconst hash = await packageHash(require.resolve('babel-core/package.json'))\n\n// Synchronously:\nconst hash = packageHash.sync(require.resolve('babel-core/package.json'))\n```\n\n`packageHash()` / `packageHash.sync()` must be called with a file path for an\nexisting `package.json` file. To get the path to an npm package it's easiest to\nuse `require.resolve('the-name/package.json')`.\n\nYou can provide multiple paths:\n\n```js\nconst hash = await packageHash([\n  require.resolve('babel-core/package.json'),\n  require.resolve('babel-preset-es2015/package.json')\n])\n```\n\nAn optional salt value can also be provided:\n\n```js\nconst hash = await packageHash(require.resolve('babel-core/package.json'), 'salt value')\n```\n\n## API\n\n### `packageHash(paths, salt?)`\n\n`paths: string | string[]` ➜ can be a single file path, or an array of paths.\n\n`salt: Array | Buffer | Object | string` ➜ optional. If an `Array` or `Object` (not `null`) it is first converted to a JSON string.\n\nReturns a promise for the hex-encoded hash string.\n\n### `packageHash.sync(paths, salt?)`\n\n`paths: string | string[]` ➜ can be a single file path, or an array of paths.\n\n`salt: Array | Buffer | Object | string` ➜ optional. If an `Array` or `Object` (not `null`) it is first converted to a JSON string.\n\nReturns a hex-encoded hash string.\n\n## Compatibility\n\n`package-hash` has been tested with Node.js 6 and above, including Windows\nsupport.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/novemberborn/package-hash.git"
  },
  "scripts": {
    "coverage": "nyc npm test",
    "generate-fixture-index": "node scripts/generate-fixture-index.js",
    "lint": "as-i-preach",
    "posttest": "npm run lint",
    "pregenerate-fixture-index": "npm run unpack-fixtures",
    "pretest": "npm run unpack-fixtures",
    "test": "ava",
    "unpack-fixtures": "node scripts/unpack-fixtures.js",
    "watch:test": "npm run test -- --watch"
  },
  "standard-engine": "@novemberborn/as-i-preach",
  "version": "3.0.0"
}
